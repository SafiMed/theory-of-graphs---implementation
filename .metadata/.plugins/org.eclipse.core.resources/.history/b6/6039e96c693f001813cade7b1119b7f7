package com.jihane.algorithms;

import java.util.LinkedList;
import java.util.Set;

import com.jihane.models.Arc;
import com.jihane.models.Graphe;
import com.jihane.models.Noeud;

public class AlgorithmeDijkstra {
	private Graphe graphe;

	public AlgorithmeDijkstra(Graphe graphe) {
		super();
		this.graphe = graphe;
	}

    public Graphe getGraphe() {
		return graphe;
	}


	public void setGraphe(Graphe graphe) {
		this.graphe = graphe;
	}

	private int getDistance(Noeud source, Noeud destination) {
        for (Arc arc : this.getGraphe().getArcs()) {
            if (arc.getSource().equals(source) && arc.getDestination().equals(destination)) {
                return arc.getPoids();
            }
        }
        throw new RuntimeException("Should not happen");
    }
	
    private LinkedList<Noeud> getVoisions(Noeud noeud) {
    	LinkedList<Noeud> voisions = new LinkedList<Noeud>();
        for (Arc arc : this.getGraphe().getArcs()) {
            if (arc.getSource().equals(noeud) && !isSettled(arc.getDestination())) {
                voisions.add(arc.getDestination());
            }
        }
        return voisions;
    }
    
    private Noeud getMinimum(Set<Noeud> noeuds) {
    	Noeud minimum = null;
        for (Noeud noeud : noeuds) {
            if (minimum == null) {
                minimum = noeud;
            } else {
                if (getShortestDistance(noeud) < getShortestDistance(minimum)) {
                    minimum = noeud;
                }
            }
        }
        return minimum;
    }

    private boolean isSettled(Noeud noeud) {
    	return true;
    }
}
